using UnityEngine;using System.Collections.Generic;public class NPRCartoonEffect : MonoBehaviour{	[Header("Ramp")]	public Color m_HighlitColor = Color.white;	public Color m_DarkColor = Color.grey;	public bool m_UseStylizedShadow = false;	public Texture2D m_StylizedShadow;	[Range(2f, 16f)] public float m_StylizedShadowScale = 8f; 	public bool m_UseRampTexture = true;	public Texture2D m_Ramp;	[Range(0f, 1f)] public float m_RampThreshold = 0.5f;	[Range(0.01f, 1f)] public float m_RampSmooth = 0.1f;	[Header("Specular")]	public Color m_SpecularColor = Color.white;	public enum ESpecType { None, Common, Stylized };	public ESpecType m_SpecType = ESpecType.None;	[Range(32f, 256f)] public float m_SpecPower = 128f;	[Range(0.01f, 1f)] public float m_SpecSmooth = 0.1f;	[Range(0f, 0.05f)] public float m_SpecScale = 0.01f;	[Range(-1f, 1f)] public float m_SpecTranslationX = 0f;	[Range(-1f, 1f)] public float m_SpecTranslationY = 0f;	[Range(-180f, 180f)] public float m_SpecRotationX = 0f;	[Range(-180f, 180f)] public float m_SpecRotationY = 0f;	[Range(-180f, 180f)] public float m_SpecRotationZ = 0f;	[Range(-1f, 1f)] public float m_SpecScaleX = 0f;	[Range(-1f, 1f)] public float m_SpecScaleY = 0f;	[Range(0f, 1f)]	public float m_SpecSplitX = 0f;	[Range(0f, 1f)]	public float m_SpecSplitY = 0f;	[Header("Rim")]	public Color m_RimColor = Color.white;	[Range(0.01f, 1f)] public float m_RimMin = 0.5f;	[Range(0.01f, 1f)] public float m_RimMax = 0.55f;	[Header("Outline")]	public Color m_OutlineColor = Color.black;	[Range(0.01f, 0.1f)] public float m_OutlineWidth = 0.02f;	[Range(0f, 1f)] public float m_OutlineExpand = 1f;	public Material[] m_Mats;		public void Initialize ()	{		Renderer rd = GetComponent<Renderer> ();		m_Mats = rd.materials;	}	public void UpdateSelfParameters ()	{		for (int i = 0; i < m_Mats.Length; i++)		{			List<string> keywords = new List<string>();			if (m_UseStylizedShadow)				keywords.Add ("NCE_STYLIZED_SHADOW");			if (m_UseRampTexture)				keywords.Add ("NCE_RAMP_TEXTURE");			if (m_SpecType == ESpecType.Common)			{				keywords.Add ("NCE_SPECULAR");			}			else if (m_SpecType == ESpecType.Stylized)			{				keywords.Add ("NCE_SPECULAR");				keywords.Add ("NCE_STYLIZED_SPECULAR");			}			m_Mats[i].shaderKeywords = keywords.ToArray ();			m_Mats[i].SetTexture ("_StylizedShadowTex", m_StylizedShadow);			m_Mats[i].SetTextureScale("_StylizedShadowTex", new Vector2 (m_StylizedShadowScale, m_StylizedShadowScale));			m_Mats[i].SetTexture ("_RampTex", m_Ramp);			m_Mats[i].SetFloat ("_RampThreshold", m_RampThreshold);			m_Mats[i].SetFloat ("_RampSmooth", m_RampSmooth);			m_Mats[i].SetColor ("_HighlitColor", m_HighlitColor);			m_Mats[i].SetColor ("_DarkColor", m_DarkColor);			m_Mats[i].SetColor ("_SpecularColor", m_SpecularColor);			m_Mats[i].SetFloat ("_SpecPower", m_SpecPower);			m_Mats[i].SetFloat ("_SpecSmooth", m_SpecSmooth);			m_Mats[i].SetFloat ("_SpecularScale", m_SpecScale);			m_Mats[i].SetFloat ("_SpecularTranslationX", m_SpecTranslationX);			m_Mats[i].SetFloat ("_SpecularTranslationY", m_SpecTranslationY);			m_Mats[i].SetFloat ("_SpecularRotationX", m_SpecRotationX);			m_Mats[i].SetFloat ("_SpecularRotationY", m_SpecRotationY);			m_Mats[i].SetFloat ("_SpecularRotationZ", m_SpecRotationZ);			m_Mats[i].SetFloat ("_SpecularScaleX", m_SpecScaleX);			m_Mats[i].SetFloat ("_SpecularScaleY", m_SpecScaleY);			m_Mats[i].SetFloat ("_SpecularSplitX", m_SpecSplitX);			m_Mats[i].SetFloat ("_SpecularSplitY", m_SpecSplitY);			m_Mats[i].SetColor ("_RimColor", m_RimColor);			m_Mats[i].SetFloat ("_RimMin", m_RimMin);			m_Mats[i].SetFloat ("_RimMax", m_RimMax);			m_Mats[i].SetColor ("_OutlineColor", m_OutlineColor);			m_Mats[i].SetFloat ("_OutlineWidth", m_OutlineWidth);			m_Mats[i].SetFloat ("_ExpandFactor", m_OutlineExpand);		}	}	public void SetMaterialsTexture (string name, Texture t)	{		for (int i = 0; i < m_Mats.Length; i++)			m_Mats[i].SetTexture (name, t);	}}